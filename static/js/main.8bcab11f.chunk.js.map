{"version":3,"sources":["bookDialog.js","index.js"],"names":["bookShelf","title","author","pages","reads","initialValues","validationSchema","Yup","required","styles","fab","position","bottom","right","select","width","number","inputProps","min","paper","margin","padding","textAlign","MyTextField","label","props","type","useField","field","meta","errorText","error","touched","TextField","helperText","fullWidth","BookDialog","React","useState","open","setOpen","handleClose","Fab","color","aria-label","onClick","style","Dialog","onClose","onSubmit","values","push","checkedItems","ReactDOM","render","document","getElementById","errors","isValid","dirty","DialogContent","name","id","as","InputProps","Boolean","MenuItem","value","DialogActions","Button","disabled","startIcon","checkReadBooks","i","map","book","Book","items","state","setState","handleChange","event","target","checked","className","item","Paper","elevation","key","Typography","component","Grid","container","alignItems","spacing","Switch","onChange","NavBar","AppBar","Toolbar","variant","App"],"mappings":"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","file":"static/js/main.8bcab11f.chunk.js","sourcesContent":["import React from 'react';\nimport { Formik, Form, Field, useField } from 'formik';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport * as Yup from 'yup';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport ReactDOM from 'react-dom';\nimport { App } from './index';\nimport Paper from '@material-ui/core/Paper';\nimport Switch from '@material-ui/core/Switch';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nexport let bookShelf = [\n  {\n    title: 'Harry Potter',\n    author: 'J.K. Rowling',\n    pages: 300,\n    reads: true,\n  },\n  {\n    title: 'The Hobbit',\n    author: 'J.R.R. Tolkien',\n    pages: 600,\n    reads: false,\n  },\n];\n\nconst initialValues = {\n  title: '',\n  author: '',\n  pages: '',\n  reads: '',\n};\n\nconst validationSchema = Yup.object({\n  title: Yup.string().required('Required'),\n  author: Yup.string().required('Required'),\n  pages: Yup.number().required('Required'),\n  reads: Yup.boolean().required('Required'),\n});\n\nconst styles = {\n  fab: { position: 'absolute', bottom: 20, right: 20 },\n  select: { width: 210 },\n  number: { inputProps: { min: 1 } },\n  paper: { width: 225, margin: 8, padding: 8, textAlign: 'center' },\n};\n\nconst MyTextField = ({ label, type, ...props }) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : '';\n  return (\n    <TextField\n      label={label}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n      margin='dense'\n      fullWidth\n    />\n  );\n};\n\nexport const BookDialog = () => {\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSubmit = (values) => {\n    bookShelf.push(values);\n    checkedItems();\n    ReactDOM.render(<App />, document.getElementById('root'));\n  };\n\n  return (\n    <div>\n      <Fab\n        color='primary'\n        aria-label='add'\n        onClick={handleClickOpen}\n        style={styles.fab}\n      >\n        <AddIcon />\n      </Fab>\n      <Dialog open={open} onClose={handleClose}>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ errors, isValid, dirty, touched }) => (\n            <Form>\n              <DialogContent>\n                <h2>Submit a New Book to Library</h2>\n                <MyTextField\n                  label='Title'\n                  name='title'\n                  id='title'\n                  type='text'\n                />\n                <MyTextField\n                  label='Author'\n                  name='author'\n                  id='author'\n                  type='text'\n                />\n                <Field\n                  as={TextField}\n                  label='Pages'\n                  name='pages'\n                  id='pages'\n                  InputProps={styles.number}\n                  type='number'\n                  margin='dense'\n                  fullWidth\n                  error={touched.pages && Boolean(errors.pages)}\n                  helperText={errors.pages && touched.pages ? errors.pages : ''}\n                />\n                <Field\n                  as={TextField}\n                  label='Have you read the book?'\n                  name='reads'\n                  id='reads'\n                  style={styles.select}\n                  select\n                  margin='dense'\n                  fullWidth\n                >\n                  <MenuItem value={true}>Read</MenuItem>\n                  <MenuItem value={false}>Not Read</MenuItem>\n                </Field>\n              </DialogContent>\n              <DialogActions>\n                <Button color='primary' onClick={handleClose}>\n                  Cancel\n                </Button>\n                <Button\n                  color='primary'\n                  type='submit'\n                  disabled={!isValid || !dirty}\n                  onClick={handleClose}\n                  startIcon={<SaveIcon />}\n                >\n                  Save\n                </Button>\n              </DialogActions>\n            </Form>\n          )}\n        </Formik>\n      </Dialog>\n    </div>\n  );\n};\n\nlet checkReadBooks = {};\n\nconst checkedItems = () => {\n  let i = 0;\n  bookShelf.map((book) => {\n    checkReadBooks['check' + i] = book.reads;\n    i++;\n  });\n};\n\nexport const Book = (items) => {\n  checkedItems();\n  const [state, setState] = React.useState(checkReadBooks);\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  return (\n    <div className='library'>\n      {items.item.map((book, i) => (\n        <Paper\n          elevation={3}\n          style={styles.paper}\n          id={book.title}\n          key={book.title}\n        >\n          <h1>{book.title}</h1>\n          <h4>{book.author}</h4>\n          <h4>{book.pages} Pages</h4>\n          <Typography component='div'>\n            <Grid component='label' container alignItems='center' spacing={1}>\n              <Grid item>Not Read</Grid>\n              <Grid item>\n                <Switch\n                  checked={state['check' + i]}\n                  name={'check' + i}\n                  color='primary'\n                  onChange={handleChange}\n                />\n              </Grid>\n              <Grid item>Have Read</Grid>\n            </Grid>\n          </Typography>\n        </Paper>\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'fontsource-roboto';\nimport { BookDialog } from './bookDialog';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { Book, bookShelf } from './bookDialog';\n\nconst NavBar = () => (\n  <div>\n    <AppBar position='static'>\n      <Toolbar variant='dense'>\n        <Typography variant='h4'>My Library</Typography>\n      </Toolbar>\n    </AppBar>\n  </div>\n);\n\nexport const App = () => (\n  <div>\n    <NavBar />\n    <Book item={bookShelf} />\n    <BookDialog item={bookShelf} />\n  </div>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}